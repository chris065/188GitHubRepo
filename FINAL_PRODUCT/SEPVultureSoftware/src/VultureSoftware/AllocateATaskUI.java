/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VultureSoftware;
import databaseui.*;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Nathan
 */
public class AllocateATaskUI extends javax.swing.JFrame {

    //Connect to database and utilize database tools.
    DataBaseToolkit dbtk;
    //Create a new list model for the task list.
    DefaultListModel taskListModel = new DefaultListModel();
    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
    
    /**
     * Creates new form AllocateATaskUI
     */
    public AllocateATaskUI() 
    {
        
        dbtk = new DataBaseToolkit();
        initComponents();
        populateList();
        populateTechnicianList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        priorityButtonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        TitleLabel = new javax.swing.JLabel();
        taskListScrollPane = new javax.swing.JScrollPane();
        taskList = new javax.swing.JList<>();
        taskLabel = new javax.swing.JLabel();
        TechLabel = new javax.swing.JLabel();
        techComboBox = new javax.swing.JComboBox<>();
        timeLabel = new javax.swing.JLabel();
        timeComboBox = new javax.swing.JComboBox<>();
        prefsLabel = new javax.swing.JLabel();
        prefsScrollPane = new javax.swing.JScrollPane();
        prefsTextArea = new javax.swing.JTextArea();
        talentsLabel = new javax.swing.JLabel();
        talentsScrollPane = new javax.swing.JScrollPane();
        talentsTextArea = new javax.swing.JTextArea();
        priorityLabel = new javax.swing.JLabel();
        lowRadioButton = new javax.swing.JRadioButton();
        mediumRadioButton = new javax.swing.JRadioButton();
        highRadioButton = new javax.swing.JRadioButton();
        allocateButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 153, 255));

        TitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        TitleLabel.setForeground(new java.awt.Color(255, 255, 255));
        TitleLabel.setText("Allocate a Task");

        taskList.setBackground(new java.awt.Color(102, 153, 255));
        taskList.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        taskList.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        taskList.setForeground(new java.awt.Color(255, 255, 255));
        taskList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        taskList.setMaximumSize(new java.awt.Dimension(264, 98));
        taskList.setMinimumSize(new java.awt.Dimension(264, 98));
        taskList.setSelectionBackground(new java.awt.Color(102, 153, 255));
        taskListScrollPane.setViewportView(taskList);

        taskLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        taskLabel.setForeground(new java.awt.Color(255, 255, 255));
        taskLabel.setText("Select a task:");

        TechLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        TechLabel.setForeground(new java.awt.Color(255, 255, 255));
        TechLabel.setText("Technician:");

        techComboBox.setBackground(new java.awt.Color(102, 153, 255));
        techComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        techComboBox.setForeground(new java.awt.Color(255, 255, 255));
        techComboBox.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        techComboBox.setFocusable(false);
        techComboBox.setMaximumSize(new java.awt.Dimension(198, 26));
        techComboBox.setMinimumSize(new java.awt.Dimension(198, 26));
        techComboBox.setPreferredSize(new java.awt.Dimension(198, 26));

        timeLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(255, 255, 255));
        timeLabel.setText("Expected Days");

        timeComboBox.setBackground(new java.awt.Color(102, 153, 255));
        timeComboBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        timeComboBox.setForeground(new java.awt.Color(255, 255, 255));
        timeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        timeComboBox.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        timeComboBox.setFocusable(false);
        timeComboBox.setMaximumSize(new java.awt.Dimension(176, 26));
        timeComboBox.setMinimumSize(new java.awt.Dimension(176, 26));
        timeComboBox.setPreferredSize(new java.awt.Dimension(176, 26));

        prefsLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        prefsLabel.setForeground(new java.awt.Color(255, 255, 255));
        prefsLabel.setText("Preferences:");

        prefsTextArea.setBackground(new java.awt.Color(102, 153, 255));
        prefsTextArea.setColumns(20);
        prefsTextArea.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        prefsTextArea.setForeground(new java.awt.Color(255, 255, 255));
        prefsTextArea.setRows(5);
        prefsTextArea.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        prefsScrollPane.setViewportView(prefsTextArea);

        talentsLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        talentsLabel.setForeground(new java.awt.Color(255, 255, 255));
        talentsLabel.setText("Required talents:");

        talentsTextArea.setBackground(new java.awt.Color(102, 153, 255));
        talentsTextArea.setColumns(20);
        talentsTextArea.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        talentsTextArea.setForeground(new java.awt.Color(255, 255, 255));
        talentsTextArea.setRows(5);
        talentsTextArea.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        talentsScrollPane.setViewportView(talentsTextArea);

        priorityLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priorityLabel.setForeground(new java.awt.Color(255, 255, 255));
        priorityLabel.setText("Priority:");

        lowRadioButton.setBackground(new java.awt.Color(102, 153, 255));
        priorityButtonGroup.add(lowRadioButton);
        lowRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lowRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        lowRadioButton.setText("Low");

        mediumRadioButton.setBackground(new java.awt.Color(102, 153, 255));
        priorityButtonGroup.add(mediumRadioButton);
        mediumRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        mediumRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        mediumRadioButton.setText("Medium");

        highRadioButton.setBackground(new java.awt.Color(102, 153, 255));
        priorityButtonGroup.add(highRadioButton);
        highRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        highRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        highRadioButton.setText("High");

        allocateButton.setBackground(new java.awt.Color(102, 153, 255));
        allocateButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        allocateButton.setForeground(new java.awt.Color(255, 255, 255));
        allocateButton.setText("Allocate");
        allocateButton.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(255, 255, 255)));
        allocateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allocateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(priorityLabel)
                        .addGap(31, 31, 31)
                        .addComponent(lowRadioButton)
                        .addGap(18, 18, 18)
                        .addComponent(mediumRadioButton)
                        .addGap(13, 13, 13)
                        .addComponent(highRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(allocateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(taskLabel)
                            .addComponent(prefsLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(talentsLabel)
                        .addGap(164, 164, 164))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(taskListScrollPane)
                            .addComponent(TitleLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prefsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(talentsScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(TechLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(techComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(timeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitleLabel)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TechLabel)
                            .addComponent(techComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timeLabel)
                            .addComponent(timeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(taskLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(taskListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prefsLabel)
                    .addComponent(talentsLabel))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(talentsScrollPane)
                    .addComponent(prefsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lowRadioButton)
                        .addComponent(mediumRadioButton)
                        .addComponent(highRadioButton)
                        .addComponent(priorityLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(allocateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(85, 85, 85))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
    Allocates task to a technician when the allocate button is clicked. 
    */
    private void allocateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allocateButtonActionPerformed
         //get all of the values that are entered.
        String taskName = taskList.getSelectedValue();
        String techName = techComboBox.getSelectedItem().toString();
        int expectedTime = Integer.parseInt(timeComboBox.getSelectedItem().toString());
        String prefs = prefsTextArea.getText();
        String talents = talentsTextArea.getText();
        String priority = selectedRadioValue();
        
        Calendar currentDate = Calendar.getInstance();
        currentDate.add(Calendar.DAY_OF_MONTH, expectedTime);
        String expectedDate = dateFormat.format(currentDate.getTime());
        
        //if any field is empty prompts the user to fill them. Else continue.
        if(priority == null || prefs.equals("") || talents.equals("") || taskName == null)
        {
            JOptionPane.showMessageDialog(null, "A task must be selected and all fields must be filled.", "Important", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            ArrayList<TaskObject> taskData = dbtk.getTask(taskName);
            
            //if the selected task does not match with a task in the database then alert the user. Else continue.
            if(taskData == null)
            {
                JOptionPane.showMessageDialog(null, "The selected task could not be found in the database.", "Error", JOptionPane.WARNING_MESSAGE);
            }
            else
            {
                //all the vars below are already in the db
                int taskID = taskData.get(0).getID();
                boolean delay = taskData.get(0).getDelay();
                String type = taskData.get(0).getType();

                //Update te database to allocate the task. If there is an error, inform the user. Else inform the user that the task was allocated correctly.
                if(!dbtk.updateTasks(taskID, delay, taskName, type, techName, expectedDate, prefs, talents, priority))
                {
                    JOptionPane.showMessageDialog(null, "There was a problem updating the database.", "Error", JOptionPane.WARNING_MESSAGE);
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "The task was allocated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    taskListModel.remove(taskList.getSelectedIndex());
                }
            }
        }
    }//GEN-LAST:event_allocateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllocateATaskUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllocateATaskUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllocateATaskUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllocateATaskUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AllocateATaskUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TechLabel;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JButton allocateButton;
    private javax.swing.JRadioButton highRadioButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton lowRadioButton;
    private javax.swing.JRadioButton mediumRadioButton;
    private javax.swing.JLabel prefsLabel;
    private javax.swing.JScrollPane prefsScrollPane;
    private javax.swing.JTextArea prefsTextArea;
    private javax.swing.ButtonGroup priorityButtonGroup;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JLabel talentsLabel;
    private javax.swing.JScrollPane talentsScrollPane;
    private javax.swing.JTextArea talentsTextArea;
    private javax.swing.JLabel taskLabel;
    private javax.swing.JList<String> taskList;
    private javax.swing.JScrollPane taskListScrollPane;
    private javax.swing.JComboBox<String> techComboBox;
    private javax.swing.JComboBox<String> timeComboBox;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables
    
    /*
    Populates the task list with tasks that are unallocated.
    */
    public void populateList()
    {
        taskList.setModel(taskListModel);

        ArrayList tasks = dbtk.getAllTasks();

        for(int i = 0; i < tasks.size(); i++)
        {
            ArrayList<TaskObject> taskData = dbtk.getTask(tasks.get(i).toString());

            if (taskData.get(0).getAssignedTo() == null)
            {
                taskListModel.addElement(tasks.get(i).toString());
            }
            else
            {
                taskData = null;
            }
        }
    }
    
    /*
    Populates the drop down box with technician's names.
    If technicians can't be found then inform the user and disable the drop down.
    Else, populate the drop down.
    */
    public void populateTechnicianList()
    {
        ArrayList techs = dbtk.getAllTechs();
        if (techs == null)
        {
            JOptionPane.showMessageDialog(null, "No technicians could be found. Please close and re-open the task allocator or contact an administrator if this problem persists.", "Error", JOptionPane.WARNING_MESSAGE);
            techComboBox.setEnabled(false);
        }
        else
        {
            for(int i = 0; i < techs.size(); i++)
            {
                techComboBox.addItem(techs.get(i).toString());
            }
        }
    }

    /*
    Returns the selected value for the priority radios. Return null if none are selected.
    */
    public String selectedRadioValue()
    {
        if(lowRadioButton.isSelected())
        {
            return "Low";
        }
        if(mediumRadioButton.isSelected())
        {
            return "Medium";
        }
        if(highRadioButton.isSelected())
        {
            return "High";
        }
        else
        {
            return null;
        }
    }
}
